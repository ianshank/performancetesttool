import os
import subprocess
import time
from pathlib import Path

import pytest


@pytest.mark.integration
class TestIntegration:
    @pytest.fixture(autouse=True)
    def setup_teardown(self, tmp_path):
        """Setup and teardown for each test"""
        # Setup
        self.output_dir = tmp_path / "integration_output"
        self.output_dir.mkdir()

        yield  # Run test

        # Teardown - cleanup any processes or files
        try:
            if hasattr(self, "process") and self.process:
                self.process.terminate()
                self.process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            if hasattr(self, "process"):
                self.process.kill()

    def test_cli_end_to_end(self, tmp_path):
        """Run the CLI with a sample config and check output files are created."""
        # Path to CLI script and sample config
        cli_script = Path(__file__).parent.parent / "src" / "cli" / "cli_interface.py"
        config_path = Path(__file__).parent.parent / "examples" / "test_config.yaml"

        # Run the CLI with timeout
        try:
            result = subprocess.run(
                [
                    "python",
                    str(cli_script),
                    "--config",
                    str(config_path),
                    "--output",
                    str(self.output_dir),
                ],
                capture_output=True,
                text=True,
                timeout=60,  # 1 minute timeout
            )

            # Check process ran successfully
            assert result.returncode == 0, f"CLI failed: {result.stderr}"

            # Check for expected output files with timeout
            start_time = time.time()
            files_found = False
            while time.time() - start_time < 30:  # 30 seconds timeout for file check
                files = list(self.output_dir.glob("*.csv"))
                if files:
                    files_found = True
                    break
                time.sleep(1)

            assert files_found, "No CSV report generated by CLI integration test within timeout"

        except subprocess.TimeoutExpired:
            pytest.fail("CLI integration test timed out after 60 seconds")
        except Exception as e:
            pytest.fail(f"Integration test failed: {str(e)}")

    def test_cli_error_handling(self, tmp_path):
        """Test CLI error handling with invalid config"""
        cli_script = Path(__file__).parent.parent / "src" / "cli" / "cli_interface.py"

        # Run CLI with invalid config
        try:
            result = subprocess.run(
                [
                    "python",
                    str(cli_script),
                    "--config",
                    "nonexistent.yaml",
                    "--output",
                    str(self.output_dir),
                ],
                capture_output=True,
                text=True,
                timeout=30,  # 30 seconds timeout
            )

            # Should fail gracefully
            assert result.returncode != 0
            assert "Error" in result.stderr or "error" in result.stderr.lower()

        except subprocess.TimeoutExpired:
            pytest.fail("CLI error handling test timed out after 30 seconds")
        except Exception as e:
            pytest.fail(f"Error handling test failed: {str(e)}")

    def test_cli_quick_run(self, tmp_path):
        """Test CLI quick run functionality"""
        cli_script = Path(__file__).parent.parent / "src" / "cli" / "cli_interface.py"

        # Run CLI in quick mode
        try:
            result = subprocess.run(
                [
                    "python",
                    str(cli_script),
                    "--quick",
                    "--url",
                    "http://httpbin.org/get",
                    "--output",
                    str(self.output_dir),
                ],
                capture_output=True,
                text=True,
                timeout=30,  # 30 seconds timeout
            )

            assert result.returncode == 0, f"Quick run failed: {result.stderr}"

            # Check for output files
            start_time = time.time()
            files_found = False
            while time.time() - start_time < 15:  # 15 seconds timeout for file check
                files = list(self.output_dir.glob("*.csv"))
                if files:
                    files_found = True
                    break
                time.sleep(1)

            assert files_found, "No output files generated from quick run within timeout"

        except subprocess.TimeoutExpired:
            pytest.fail("CLI quick run test timed out after 30 seconds")
        except Exception as e:
            pytest.fail(f"Quick run test failed: {str(e)}")
