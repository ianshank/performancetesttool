name: Regression Tests

on:
  # Trigger on push to main branch (pre-production)
  push:
    branches: [ main ]
  
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'stage'
        type: choice
        options:
        - stage
        - prod
      quick_mode:
        description: 'Run quick test subset'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  regression-tests:
    name: Run Regression Tests
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'stage' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-json-report pytest-html pytest-cov
        
    - name: Set up environment variables
      run: |
        echo "NLM_ENVIRONMENT=${{ github.event.inputs.environment || 'stage' }}" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}/src" >> $GITHUB_ENV
        
    - name: Create required directories
      run: |
        mkdir -p reports logs
        
    - name: Run regression tests
      id: regression
      run: |
        if [ "${{ github.event.inputs.quick_mode }}" = "true" ]; then
          QUICK_FLAG="--quick"
        else
          QUICK_FLAG=""
        fi
        
        python scripts/run_regression_tests.py \
          --env ${{ github.event.inputs.environment || 'stage' }} \
          $QUICK_FLAG \
          --verbose \
          --report-file regression_report.json
      continue-on-error: true
      
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-test-reports-${{ github.event.inputs.environment || 'stage' }}
        path: |
          reports/
          logs/
        retention-days: 30
        
    - name: Parse test results
      id: results
      run: |
        if [ -f "reports/regression_report.json" ]; then
          DEPLOYMENT_APPROVED=$(python -c "
          import json
          with open('reports/regression_report.json') as f:
              data = json.load(f)
          print('true' if data['summary']['deployment_approved'] else 'false')
          ")
          
          SUCCESS_RATE=$(python -c "
          import json
          with open('reports/regression_report.json') as f:
              data = json.load(f)
          print(f\"{data['summary']['success_rate']:.1%}\")
          ")
          
          echo "deployment_approved=$DEPLOYMENT_APPROVED" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
        else
          echo "deployment_approved=false" >> $GITHUB_OUTPUT
          echo "success_rate=0%" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let reportContent = '## 🧪 Regression Test Results\n\n';
          
          if (fs.existsSync('reports/regression_report.json')) {
            const report = JSON.parse(fs.readFileSync('reports/regression_report.json', 'utf8'));
            
            const status = report.summary.deployment_approved ? '✅ APPROVED' : '❌ BLOCKED';
            const environment = report.environment;
            const successRate = (report.summary.success_rate * 100).toFixed(1);
            const duration = report.summary.total_duration.toFixed(1);
            
            reportContent += `**Environment:** ${environment}\n`;
            reportContent += `**Status:** ${status}\n`;
            reportContent += `**Success Rate:** ${successRate}%\n`;
            reportContent += `**Duration:** ${duration}s\n\n`;
            
            reportContent += '### Test Suites\n\n';
            for (const [name, result] of Object.entries(report.suites)) {
              const emoji = result.passed ? '✅' : '❌';
              const duration = result.duration.toFixed(1);
              reportContent += `- ${emoji} **${name}** (${duration}s)\n`;
            }
            
            reportContent += '\n### Recommendations\n\n';
            for (const rec of report.recommendations) {
              reportContent += `- ${rec}\n`;
            }
          } else {
            reportContent += '❌ **Test execution failed** - No report generated\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reportContent
          });
          
    - name: Check deployment approval
      if: steps.results.outputs.deployment_approved == 'false'
      run: |
        echo "❌ Regression tests failed - deployment blocked"
        echo "Success rate: ${{ steps.results.outputs.success_rate }}"
        exit 1
        
    - name: Deployment approved
      if: steps.results.outputs.deployment_approved == 'true'
      run: |
        echo "✅ Regression tests passed - deployment approved"
        echo "Success rate: ${{ steps.results.outputs.success_rate }}"

  # Job that depends on regression tests for deployment gating
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: regression-tests
    if: always()
    
    steps:
    - name: Check gate status
      run: |
        if [ "${{ needs.regression-tests.result }}" = "success" ]; then
          echo "🚀 Deployment gate: OPEN"
          echo "Regression tests passed - proceed with deployment"
        else
          echo "🚫 Deployment gate: CLOSED" 
          echo "Regression tests failed - deployment blocked"
          exit 1
        fi 